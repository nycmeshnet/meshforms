/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Status432Enum } from './Status432Enum';
import {
    Status432EnumFromJSON,
    Status432EnumFromJSONTyped,
    Status432EnumToJSON,
} from './Status432Enum';
import type { AccessPointNode } from './AccessPointNode';
import {
    AccessPointNodeFromJSON,
    AccessPointNodeFromJSONTyped,
    AccessPointNodeToJSON,
} from './AccessPointNode';
import type { AccessPointLinksFromInner } from './AccessPointLinksFromInner';
import {
    AccessPointLinksFromInnerFromJSON,
    AccessPointLinksFromInnerFromJSONTyped,
    AccessPointLinksFromInnerToJSON,
} from './AccessPointLinksFromInner';

/**
 * A  ModelSerializer MixIn which sets `NestedKeyObjectRelatedField` as the default field class
 * to use for the foreign key fields
 * @export
 * @interface PatchedDevice
 */
export interface PatchedDevice {
    /**
     * 
     * @type {string}
     * @memberof PatchedDevice
     */
    readonly id?: string;
    /**
     * Approximate Device latitude in decimal degrees (this is read through from the attached Node object, not stored separately)
     * @type {number}
     * @memberof PatchedDevice
     */
    readonly latitude?: number;
    /**
     * Approximate Device longitude in decimal degrees (this is read through from the attached Node object, not stored separately)
     * @type {number}
     * @memberof PatchedDevice
     */
    readonly longitude?: number;
    /**
     * Approximate Device altitude in "absolute" meters above mean sea level (this is read through from the attached Node object, not stored separately)
     * @type {number}
     * @memberof PatchedDevice
     */
    readonly altitude?: number;
    /**
     * 
     * @type {Array<AccessPointLinksFromInner>}
     * @memberof PatchedDevice
     */
    readonly linksFrom?: Array<AccessPointLinksFromInner>;
    /**
     * 
     * @type {Array<AccessPointLinksFromInner>}
     * @memberof PatchedDevice
     */
    readonly linksTo?: Array<AccessPointLinksFromInner>;
    /**
     * The name of this device, usually configured as the hostname in the device firmware, usually in the format nycmesh-xxxx-yyyy-zzzz, where xxxx is the network number for the node this device is located at, yyyy is the type of the device, and zzzz is the network number of the other side of the link this device creates (if applicable)
     * @type {string}
     * @memberof PatchedDevice
     */
    name?: string | null;
    /**
     * The current status of this device
     * 
     * * `Inactive` - Inactive
     * * `Active` - Active
     * * `Potential` - Potential
     * @type {Status432Enum}
     * @memberof PatchedDevice
     */
    status?: Status432Enum;
    /**
     * The date this device first became active on the mesh
     * @type {Date}
     * @memberof PatchedDevice
     */
    installDate?: Date | null;
    /**
     * The this device was abandoned, unplugged, or removed from service
     * @type {Date}
     * @memberof PatchedDevice
     */
    abandonDate?: Date | null;
    /**
     * A free-form text description of this Device, to track any additional information. For imported Devices, this starts with a formatted block of information about the import processand original data. However this structure can be changed by admins at any time and should not be relied onby automated systems. 
     * @type {string}
     * @memberof PatchedDevice
     */
    notes?: string | null;
    /**
     * The UUID used to indentify this device in UISP (if applicable)
     * @type {string}
     * @memberof PatchedDevice
     */
    uispId?: string | null;
    /**
     * 
     * @type {AccessPointNode}
     * @memberof PatchedDevice
     */
    node?: AccessPointNode;
}



/**
 * Check if a given object implements the PatchedDevice interface.
 */
export function instanceOfPatchedDevice(value: object): value is PatchedDevice {
    return true;
}

export function PatchedDeviceFromJSON(json: any): PatchedDevice {
    return PatchedDeviceFromJSONTyped(json, false);
}

export function PatchedDeviceFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedDevice {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'altitude': json['altitude'] == null ? undefined : json['altitude'],
        'linksFrom': json['links_from'] == null ? undefined : ((json['links_from'] as Array<any>).map(AccessPointLinksFromInnerFromJSON)),
        'linksTo': json['links_to'] == null ? undefined : ((json['links_to'] as Array<any>).map(AccessPointLinksFromInnerFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'status': json['status'] == null ? undefined : Status432EnumFromJSON(json['status']),
        'installDate': json['install_date'] == null ? undefined : (new Date(json['install_date'])),
        'abandonDate': json['abandon_date'] == null ? undefined : (new Date(json['abandon_date'])),
        'notes': json['notes'] == null ? undefined : json['notes'],
        'uispId': json['uisp_id'] == null ? undefined : json['uisp_id'],
        'node': json['node'] == null ? undefined : AccessPointNodeFromJSON(json['node']),
    };
}

export function PatchedDeviceToJSON(value?: Omit<PatchedDevice, 'id'|'latitude'|'longitude'|'altitude'|'links_from'|'links_to'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'status': Status432EnumToJSON(value['status']),
        'install_date': value['installDate'] == null ? undefined : ((value['installDate'] as any).toISOString().substring(0,10)),
        'abandon_date': value['abandonDate'] == null ? undefined : ((value['abandonDate'] as any).toISOString().substring(0,10)),
        'notes': value['notes'],
        'uisp_id': value['uispId'],
        'node': AccessPointNodeToJSON(value['node']),
    };
}

