/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NodeBuildingsInner } from './NodeBuildingsInner';
import {
    NodeBuildingsInnerFromJSON,
    NodeBuildingsInnerFromJSONTyped,
    NodeBuildingsInnerToJSON,
} from './NodeBuildingsInner';
import type { BuildingInstallsInner } from './BuildingInstallsInner';
import {
    BuildingInstallsInnerFromJSON,
    BuildingInstallsInnerFromJSONTyped,
    BuildingInstallsInnerToJSON,
} from './BuildingInstallsInner';
import type { NodeDevicesInner } from './NodeDevicesInner';
import {
    NodeDevicesInnerFromJSON,
    NodeDevicesInnerFromJSONTyped,
    NodeDevicesInnerToJSON,
} from './NodeDevicesInner';
import type { Status2a6Enum } from './Status2a6Enum';
import {
    Status2a6EnumFromJSON,
    Status2a6EnumFromJSONTyped,
    Status2a6EnumToJSON,
} from './Status2a6Enum';
import type { TypeB10Enum } from './TypeB10Enum';
import {
    TypeB10EnumFromJSON,
    TypeB10EnumFromJSONTyped,
    TypeB10EnumToJSON,
} from './TypeB10Enum';

/**
 * A  ModelSerializer MixIn which sets `NestedKeyObjectRelatedField` as the default field class
 * to use for the foreign key fields
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    id?: string;
    /**
     * 
     * @type {Array<NodeBuildingsInner>}
     * @memberof Node
     */
    readonly buildings: Array<NodeBuildingsInner>;
    /**
     * 
     * @type {Array<NodeDevicesInner>}
     * @memberof Node
     */
    readonly devices: Array<NodeDevicesInner>;
    /**
     * 
     * @type {Array<BuildingInstallsInner>}
     * @memberof Node
     */
    readonly installs: Array<BuildingInstallsInner>;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    networkNumber?: number | null;
    /**
     * The colloquial name of this node used among mesh volunteers, if applicable
     * @type {string}
     * @memberof Node
     */
    name?: string | null;
    /**
     * The current status of this Node
     * 
     * * `Inactive` - Inactive
     * * `Active` - Active
     * * `Planned` - Planned
     * @type {Status2a6Enum}
     * @memberof Node
     */
    status: Status2a6Enum;
    /**
     * The type of node this is, controls the icon used on the network map
     * 
     * * `Standard` - Standard
     * * `Hub` - Hub
     * * `Supernode` - Supernode
     * * `POP` - Pop
     * * `AP` - Ap
     * * `Remote` - Remote
     * @type {TypeB10Enum}
     * @memberof Node
     */
    type?: TypeB10Enum;
    /**
     * Approximate Node latitude in decimal degrees (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)
     * @type {number}
     * @memberof Node
     */
    latitude: number;
    /**
     * Approximate Node longitude in decimal degrees (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)
     * @type {number}
     * @memberof Node
     */
    longitude: number;
    /**
     * Approximate Node altitude in "absolute" meters above mean sea level (this will match one of the attached Building objects in most cases, but has been manually moved around in some cases to more accurately reflect node location)
     * @type {number}
     * @memberof Node
     */
    altitude?: number | null;
    /**
     * The date the first Install or Device associated with this Node became active on the mesh
     * @type {Date}
     * @memberof Node
     */
    installDate?: Date | null;
    /**
     * The date the last Install or Device associated with this Node was abandoned, unplugged, or removed from service
     * @type {Date}
     * @memberof Node
     */
    abandonDate?: Date | null;
    /**
     * A free-form text description of this Node, to track any additional information. For Nodes imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. 
     * @type {string}
     * @memberof Node
     */
    notes?: string | null;
}



/**
 * Check if a given object implements the Node interface.
 */
export function instanceOfNode(value: object): value is Node {
    if (!('buildings' in value) || value['buildings'] === undefined) return false;
    if (!('devices' in value) || value['devices'] === undefined) return false;
    if (!('installs' in value) || value['installs'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('latitude' in value) || value['latitude'] === undefined) return false;
    if (!('longitude' in value) || value['longitude'] === undefined) return false;
    return true;
}

export function NodeFromJSON(json: any): Node {
    return NodeFromJSONTyped(json, false);
}

export function NodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Node {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'buildings': ((json['buildings'] as Array<any>).map(NodeBuildingsInnerFromJSON)),
        'devices': ((json['devices'] as Array<any>).map(NodeDevicesInnerFromJSON)),
        'installs': ((json['installs'] as Array<any>).map(BuildingInstallsInnerFromJSON)),
        'networkNumber': json['network_number'] == null ? undefined : json['network_number'],
        'name': json['name'] == null ? undefined : json['name'],
        'status': Status2a6EnumFromJSON(json['status']),
        'type': json['type'] == null ? undefined : TypeB10EnumFromJSON(json['type']),
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'altitude': json['altitude'] == null ? undefined : json['altitude'],
        'installDate': json['install_date'] == null ? undefined : (new Date(json['install_date'])),
        'abandonDate': json['abandon_date'] == null ? undefined : (new Date(json['abandon_date'])),
        'notes': json['notes'] == null ? undefined : json['notes'],
    };
}

export function NodeToJSON(value?: Omit<Node, 'buildings'|'devices'|'installs'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'network_number': value['networkNumber'],
        'name': value['name'],
        'status': Status2a6EnumToJSON(value['status']),
        'type': TypeB10EnumToJSON(value['type']),
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'altitude': value['altitude'],
        'install_date': value['installDate'] == null ? undefined : ((value['installDate'] as any).toISOString().substring(0,10)),
        'abandon_date': value['abandonDate'] == null ? undefined : ((value['abandonDate'] as any).toISOString().substring(0,10)),
        'notes': value['notes'],
    };
}

