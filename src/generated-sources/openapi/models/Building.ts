/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AddressTruthSourcesEnum } from './AddressTruthSourcesEnum';
import {
    AddressTruthSourcesEnumFromJSON,
    AddressTruthSourcesEnumFromJSONTyped,
    AddressTruthSourcesEnumToJSON,
} from './AddressTruthSourcesEnum';
import type { BuildingNodesInner } from './BuildingNodesInner';
import {
    BuildingNodesInnerFromJSON,
    BuildingNodesInnerFromJSONTyped,
    BuildingNodesInnerToJSON,
} from './BuildingNodesInner';
import type { BuildingPrimaryNode } from './BuildingPrimaryNode';
import {
    BuildingPrimaryNodeFromJSON,
    BuildingPrimaryNodeFromJSONTyped,
    BuildingPrimaryNodeToJSON,
} from './BuildingPrimaryNode';
import type { BuildingInstallsInner } from './BuildingInstallsInner';
import {
    BuildingInstallsInnerFromJSON,
    BuildingInstallsInnerFromJSONTyped,
    BuildingInstallsInnerToJSON,
} from './BuildingInstallsInner';

/**
 * A  ModelSerializer MixIn which sets `NestedKeyObjectRelatedField` as the default field class
 * to use for the foreign key fields
 * @export
 * @interface Building
 */
export interface Building {
    /**
     * 
     * @type {string}
     * @memberof Building
     */
    readonly id: string;
    /**
     * 
     * @type {Array<BuildingInstallsInner>}
     * @memberof Building
     */
    readonly installs: Array<BuildingInstallsInner>;
    /**
     * NYC DOB Identifier for the structure containing this building
     * @type {number}
     * @memberof Building
     */
    bin?: number | null;
    /**
     * Line 1 only of the address of this building: i.e. <house num> <street>
     * @type {string}
     * @memberof Building
     */
    streetAddress?: string | null;
    /**
     * The name of the borough this building is in for buildings within NYC, "New York" for Manhattan to match street addresses. The actual city name for anything outside NYC
     * @type {string}
     * @memberof Building
     */
    city?: string | null;
    /**
     * The 2 letter abreviation of the US State this building is contained within, e.g. "NY" or "NJ"
     * @type {string}
     * @memberof Building
     */
    state?: string | null;
    /**
     * The five digit ZIP code this building is contained within
     * @type {string}
     * @memberof Building
     */
    zipCode?: string | null;
    /**
     * A list of strings that answers the question: How was the content of the street address, city, state, and ZIP fields determined? This is useful in understanding the level of validation applied to spreadsheet imported data. Possible values are: OSMNominatim, OSMNominatimZIPOnly, NYCPlanningLabs, PeliasStringParsing, ReverseGeocodeFromCoordinates, HumanEntry. Check the import script for details
     * @type {Array<AddressTruthSourcesEnum>}
     * @memberof Building
     */
    addressTruthSources: Array<AddressTruthSourcesEnum>;
    /**
     * Building latitude in decimal degrees
     * @type {number}
     * @memberof Building
     */
    latitude: number;
    /**
     * Building longitude in decimal degrees
     * @type {number}
     * @memberof Building
     */
    longitude: number;
    /**
     * Building rooftop altitude in "absolute" meters above mean sea level
     * @type {number}
     * @memberof Building
     */
    altitude?: number | null;
    /**
     * A free-form text description of this building, to track any additional information. For Buidings imported from the spreadsheet, this starts with a formatted block of information about the import process and original spreadsheet data. However this structure can be changed by admins at any time and should not be relied on by automated systems. 
     * @type {string}
     * @memberof Building
     */
    notes?: string | null;
    /**
     * Panoramas taken from the roof of this Building
     * @type {Array<string>}
     * @memberof Building
     */
    panoramas?: Array<string> | null;
    /**
     * 
     * @type {BuildingPrimaryNode}
     * @memberof Building
     */
    primaryNode?: BuildingPrimaryNode | null;
    /**
     * All nodes located on the same structure (i.e. a discrete man-made place identified by the same BIN) that this Building is located within.
     * @type {Array<BuildingNodesInner>}
     * @memberof Building
     */
    nodes?: Array<BuildingNodesInner>;
}

/**
 * Check if a given object implements the Building interface.
 */
export function instanceOfBuilding(value: object): value is Building {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('installs' in value) || value['installs'] === undefined) return false;
    if (!('addressTruthSources' in value) || value['addressTruthSources'] === undefined) return false;
    if (!('latitude' in value) || value['latitude'] === undefined) return false;
    if (!('longitude' in value) || value['longitude'] === undefined) return false;
    return true;
}

export function BuildingFromJSON(json: any): Building {
    return BuildingFromJSONTyped(json, false);
}

export function BuildingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Building {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'installs': ((json['installs'] as Array<any>).map(BuildingInstallsInnerFromJSON)),
        'bin': json['bin'] == null ? undefined : json['bin'],
        'streetAddress': json['street_address'] == null ? undefined : json['street_address'],
        'city': json['city'] == null ? undefined : json['city'],
        'state': json['state'] == null ? undefined : json['state'],
        'zipCode': json['zip_code'] == null ? undefined : json['zip_code'],
        'addressTruthSources': ((json['address_truth_sources'] as Array<any>).map(AddressTruthSourcesEnumFromJSON)),
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'altitude': json['altitude'] == null ? undefined : json['altitude'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'panoramas': json['panoramas'] == null ? undefined : json['panoramas'],
        'primaryNode': json['primary_node'] == null ? undefined : BuildingPrimaryNodeFromJSON(json['primary_node']),
        'nodes': json['nodes'] == null ? undefined : ((json['nodes'] as Array<any>).map(BuildingNodesInnerFromJSON)),
    };
}

export function BuildingToJSON(value?: Omit<Building, 'id'|'installs'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'bin': value['bin'],
        'street_address': value['streetAddress'],
        'city': value['city'],
        'state': value['state'],
        'zip_code': value['zipCode'],
        'address_truth_sources': ((value['addressTruthSources'] as Array<any>).map(AddressTruthSourcesEnumToJSON)),
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'altitude': value['altitude'],
        'notes': value['notes'],
        'panoramas': value['panoramas'],
        'primary_node': BuildingPrimaryNodeToJSON(value['primaryNode']),
        'nodes': value['nodes'] == null ? undefined : ((value['nodes'] as Array<any>).map(BuildingNodesInnerToJSON)),
    };
}

