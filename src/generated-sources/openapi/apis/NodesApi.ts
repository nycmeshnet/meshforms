/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Node,
  NodeEdit,
  PaginatedNodeList,
  PatchedNodeEdit,
} from '../models/index';
import {
    NodeFromJSON,
    NodeToJSON,
    NodeEditFromJSON,
    NodeEditToJSON,
    PaginatedNodeListFromJSON,
    PaginatedNodeListToJSON,
    PatchedNodeEditFromJSON,
    PatchedNodeEditToJSON,
} from '../models/index';

export interface ApiV1NodesCreateRequest {
    node: Omit<Node, 'buildings'|'devices'|'installs'>;
}

export interface ApiV1NodesDestroyRequest {
    id: string;
}

export interface ApiV1NodesDestroy2Request {
    networkNumber: number;
}

export interface ApiV1NodesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1NodesLookupListRequest {
    building?: number;
    installNumber?: number;
    name?: string;
    page?: number;
    pageSize?: number;
    status?: string;
}

export interface ApiV1NodesPartialUpdateRequest {
    id: string;
    patchedNodeEdit?: Omit<PatchedNodeEdit, 'buildings'|'devices'|'installs'|'network_number'>;
}

export interface ApiV1NodesPartialUpdate2Request {
    networkNumber: number;
    patchedNodeEdit?: Omit<PatchedNodeEdit, 'buildings'|'devices'|'installs'|'network_number'>;
}

export interface ApiV1NodesRetrieveRequest {
    id: string;
}

export interface ApiV1NodesRetrieve2Request {
    networkNumber: number;
}

export interface ApiV1NodesUpdateRequest {
    id: string;
    nodeEdit: Omit<NodeEdit, 'buildings'|'devices'|'installs'|'network_number'>;
}

export interface ApiV1NodesUpdate2Request {
    networkNumber: number;
    nodeEdit: Omit<NodeEdit, 'buildings'|'devices'|'installs'|'network_number'>;
}

/**
 * 
 */
export class NodesApi extends runtime.BaseAPI {

    /**
     */
    async apiV1NodesCreateRaw(requestParameters: ApiV1NodesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Node>> {
        if (requestParameters['node'] == null) {
            throw new runtime.RequiredError(
                'node',
                'Required parameter "node" was null or undefined when calling apiV1NodesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NodeToJSON(requestParameters['node']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesCreate(requestParameters: ApiV1NodesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Node> {
        const response = await this.apiV1NodesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NodesDestroyRaw(requestParameters: ApiV1NodesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1NodesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1NodesDestroy(requestParameters: ApiV1NodesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1NodesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1NodesDestroy2Raw(requestParameters: ApiV1NodesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['networkNumber'] == null) {
            throw new runtime.RequiredError(
                'networkNumber',
                'Required parameter "networkNumber" was null or undefined when calling apiV1NodesDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/{network_number}/`.replace(`{${"network_number"}}`, encodeURIComponent(String(requestParameters['networkNumber']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1NodesDestroy2(requestParameters: ApiV1NodesDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1NodesDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1NodesListRaw(requestParameters: ApiV1NodesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedNodeList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNodeListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesList(requestParameters: ApiV1NodesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedNodeList> {
        const response = await this.apiV1NodesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NodesLookupListRaw(requestParameters: ApiV1NodesLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedNodeList>> {
        const queryParameters: any = {};

        if (requestParameters['building'] != null) {
            queryParameters['building'] = requestParameters['building'];
        }

        if (requestParameters['installNumber'] != null) {
            queryParameters['install_number'] = requestParameters['installNumber'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNodeListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesLookupList(requestParameters: ApiV1NodesLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedNodeList> {
        const response = await this.apiV1NodesLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NodesPartialUpdateRaw(requestParameters: ApiV1NodesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodeEdit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1NodesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedNodeEditToJSON(requestParameters['patchedNodeEdit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeEditFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesPartialUpdate(requestParameters: ApiV1NodesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodeEdit> {
        const response = await this.apiV1NodesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NodesPartialUpdate2Raw(requestParameters: ApiV1NodesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodeEdit>> {
        if (requestParameters['networkNumber'] == null) {
            throw new runtime.RequiredError(
                'networkNumber',
                'Required parameter "networkNumber" was null or undefined when calling apiV1NodesPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/{network_number}/`.replace(`{${"network_number"}}`, encodeURIComponent(String(requestParameters['networkNumber']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedNodeEditToJSON(requestParameters['patchedNodeEdit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeEditFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesPartialUpdate2(requestParameters: ApiV1NodesPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodeEdit> {
        const response = await this.apiV1NodesPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NodesRetrieveRaw(requestParameters: ApiV1NodesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodeEdit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1NodesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeEditFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesRetrieve(requestParameters: ApiV1NodesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodeEdit> {
        const response = await this.apiV1NodesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NodesRetrieve2Raw(requestParameters: ApiV1NodesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodeEdit>> {
        if (requestParameters['networkNumber'] == null) {
            throw new runtime.RequiredError(
                'networkNumber',
                'Required parameter "networkNumber" was null or undefined when calling apiV1NodesRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/{network_number}/`.replace(`{${"network_number"}}`, encodeURIComponent(String(requestParameters['networkNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeEditFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesRetrieve2(requestParameters: ApiV1NodesRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodeEdit> {
        const response = await this.apiV1NodesRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NodesUpdateRaw(requestParameters: ApiV1NodesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodeEdit>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1NodesUpdate().'
            );
        }

        if (requestParameters['nodeEdit'] == null) {
            throw new runtime.RequiredError(
                'nodeEdit',
                'Required parameter "nodeEdit" was null or undefined when calling apiV1NodesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NodeEditToJSON(requestParameters['nodeEdit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeEditFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesUpdate(requestParameters: ApiV1NodesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodeEdit> {
        const response = await this.apiV1NodesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NodesUpdate2Raw(requestParameters: ApiV1NodesUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodeEdit>> {
        if (requestParameters['networkNumber'] == null) {
            throw new runtime.RequiredError(
                'networkNumber',
                'Required parameter "networkNumber" was null or undefined when calling apiV1NodesUpdate2().'
            );
        }

        if (requestParameters['nodeEdit'] == null) {
            throw new runtime.RequiredError(
                'nodeEdit',
                'Required parameter "nodeEdit" was null or undefined when calling apiV1NodesUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/nodes/{network_number}/`.replace(`{${"network_number"}}`, encodeURIComponent(String(requestParameters['networkNumber']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NodeEditToJSON(requestParameters['nodeEdit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeEditFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NodesUpdate2(requestParameters: ApiV1NodesUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodeEdit> {
        const response = await this.apiV1NodesUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
