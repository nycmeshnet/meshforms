/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CityErrorResponse,
  KioskData,
  MapDataInstall,
  MapDataLink,
  MapDataSector,
} from '../models/index';
import {
    CityErrorResponseFromJSON,
    CityErrorResponseToJSON,
    KioskDataFromJSON,
    KioskDataToJSON,
    MapDataInstallFromJSON,
    MapDataInstallToJSON,
    MapDataLinkFromJSON,
    MapDataLinkToJSON,
    MapDataSectorFromJSON,
    MapDataSectorToJSON,
} from '../models/index';

/**
 * 
 */
export class WebsiteMapDataApi extends runtime.BaseAPI {

    /**
     * Proxy for the city of new york LinkNYC kisok location dataset. Output in a JSON format that is compatible with the website map. (Warning: This endpoint is a legacy format and may be deprecated/removed in the future)
     */
    async apiV1MapdataKiosksRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KioskData>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/mapdata/kiosks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KioskDataFromJSON));
    }

    /**
     * Proxy for the city of new york LinkNYC kisok location dataset. Output in a JSON format that is compatible with the website map. (Warning: This endpoint is a legacy format and may be deprecated/removed in the future)
     */
    async apiV1MapdataKiosksRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KioskData>> {
        const response = await this.apiV1MapdataKiosksRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Complete list of all Links, unpaginated, in the format expected by the website map. (Warning: This endpoint is a legacy format and may be deprecated/removed in the future)
     */
    async apiV1MapdataLinksListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MapDataLink>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/mapdata/links/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MapDataLinkFromJSON));
    }

    /**
     * Complete list of all Links, unpaginated, in the format expected by the website map. (Warning: This endpoint is a legacy format and may be deprecated/removed in the future)
     */
    async apiV1MapdataLinksList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MapDataLink>> {
        const response = await this.apiV1MapdataLinksListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Complete list of all \"Nodes\" (mostly Installs with some fake installs generated to solve NN re-use), unpaginated, in the format expected by the website map. (Warning: This endpoint is a legacy format and may be deprecated/removed in the future)
     */
    async apiV1MapdataNodesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MapDataInstall>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/mapdata/nodes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MapDataInstallFromJSON));
    }

    /**
     * Complete list of all \"Nodes\" (mostly Installs with some fake installs generated to solve NN re-use), unpaginated, in the format expected by the website map. (Warning: This endpoint is a legacy format and may be deprecated/removed in the future)
     */
    async apiV1MapdataNodesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MapDataInstall>> {
        const response = await this.apiV1MapdataNodesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Complete list of all Sectors, unpaginated, in the format expected by the website map. (Warning: This endpoint is a legacy format and may be deprecated/removed in the future)
     */
    async apiV1MapdataSectorsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MapDataSector>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/mapdata/sectors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MapDataSectorFromJSON));
    }

    /**
     * Complete list of all Sectors, unpaginated, in the format expected by the website map. (Warning: This endpoint is a legacy format and may be deprecated/removed in the future)
     */
    async apiV1MapdataSectorsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MapDataSector>> {
        const response = await this.apiV1MapdataSectorsListRaw(initOverrides);
        return await response.value();
    }

}
