/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponseInternalFailure,
  ErrorResponseInvalidAddr,
  ErrorResponseMissingFields,
  GeocodeSuccessResponse,
} from '../models/index';
import {
    ErrorResponseInternalFailureFromJSON,
    ErrorResponseInternalFailureToJSON,
    ErrorResponseInvalidAddrFromJSON,
    ErrorResponseInvalidAddrToJSON,
    ErrorResponseMissingFieldsFromJSON,
    ErrorResponseMissingFieldsToJSON,
    GeocodeSuccessResponseFromJSON,
    GeocodeSuccessResponseToJSON,
} from '../models/index';

export interface ApiV1GeographyNycGeocodeV2SearchRetrieveRequest {
    city: string;
    state: string;
    streetAddress: string;
    zip: number;
}

/**
 * 
 */
export class GeographicKMLDataApi extends runtime.BaseAPI {

    /**
     * Use the NYC geocoding APIs to look up an address, and return the lat/lon/alt corresponding to it or 404 if the address cannot be found within NYC
     */
    async apiV1GeographyNycGeocodeV2SearchRetrieveRaw(requestParameters: ApiV1GeographyNycGeocodeV2SearchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeocodeSuccessResponse>> {
        if (requestParameters['city'] == null) {
            throw new runtime.RequiredError(
                'city',
                'Required parameter "city" was null or undefined when calling apiV1GeographyNycGeocodeV2SearchRetrieve().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling apiV1GeographyNycGeocodeV2SearchRetrieve().'
            );
        }

        if (requestParameters['streetAddress'] == null) {
            throw new runtime.RequiredError(
                'streetAddress',
                'Required parameter "streetAddress" was null or undefined when calling apiV1GeographyNycGeocodeV2SearchRetrieve().'
            );
        }

        if (requestParameters['zip'] == null) {
            throw new runtime.RequiredError(
                'zip',
                'Required parameter "zip" was null or undefined when calling apiV1GeographyNycGeocodeV2SearchRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['city'] != null) {
            queryParameters['city'] = requestParameters['city'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['streetAddress'] != null) {
            queryParameters['street_address'] = requestParameters['streetAddress'];
        }

        if (requestParameters['zip'] != null) {
            queryParameters['zip'] = requestParameters['zip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/geography/nyc-geocode/v2/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeocodeSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Use the NYC geocoding APIs to look up an address, and return the lat/lon/alt corresponding to it or 404 if the address cannot be found within NYC
     */
    async apiV1GeographyNycGeocodeV2SearchRetrieve(requestParameters: ApiV1GeographyNycGeocodeV2SearchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeocodeSuccessResponse> {
        const response = await this.apiV1GeographyNycGeocodeV2SearchRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a KML file which contains all nodes and links on the mesh
     */
    async apiV1GeographyWholeMeshKmlRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/geography/whole-mesh.kml`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Generate a KML file which contains all nodes and links on the mesh
     */
    async apiV1GeographyWholeMeshKmlRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.apiV1GeographyWholeMeshKmlRetrieveRaw(initOverrides);
        return await response.value();
    }

}
