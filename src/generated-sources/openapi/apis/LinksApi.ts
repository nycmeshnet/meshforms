/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Link,
  PaginatedLinkList,
  PatchedLink,
} from '../models/index';
import {
    LinkFromJSON,
    LinkToJSON,
    PaginatedLinkListFromJSON,
    PaginatedLinkListToJSON,
    PatchedLinkFromJSON,
    PatchedLinkToJSON,
} from '../models/index';

export interface ApiV1LinksCreateRequest {
    link: Omit<Link, 'id'>;
}

export interface ApiV1LinksDestroyRequest {
    id: string;
}

export interface ApiV1LinksListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1LinksLookupListRequest {
    device?: number;
    networkNumber?: number;
    node?: string;
    page?: number;
    pageSize?: number;
    status?: string;
    type?: string;
    uispId?: string;
}

export interface ApiV1LinksPartialUpdateRequest {
    id: string;
    patchedLink?: Omit<PatchedLink, 'id'>;
}

export interface ApiV1LinksRetrieveRequest {
    id: string;
}

export interface ApiV1LinksUpdateRequest {
    id: string;
    link: Omit<Link, 'id'>;
}

/**
 * 
 */
export class LinksApi extends runtime.BaseAPI {

    /**
     */
    async apiV1LinksCreateRaw(requestParameters: ApiV1LinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['link'] == null) {
            throw new runtime.RequiredError(
                'link',
                'Required parameter "link" was null or undefined when calling apiV1LinksCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/links/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkToJSON(requestParameters['link']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LinksCreate(requestParameters: ApiV1LinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.apiV1LinksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LinksDestroyRaw(requestParameters: ApiV1LinksDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LinksDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/links/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1LinksDestroy(requestParameters: ApiV1LinksDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1LinksDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1LinksListRaw(requestParameters: ApiV1LinksListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLinkList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/links/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLinkListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LinksList(requestParameters: ApiV1LinksListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLinkList> {
        const response = await this.apiV1LinksListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LinksLookupListRaw(requestParameters: ApiV1LinksLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLinkList>> {
        const queryParameters: any = {};

        if (requestParameters['device'] != null) {
            queryParameters['device'] = requestParameters['device'];
        }

        if (requestParameters['networkNumber'] != null) {
            queryParameters['network_number'] = requestParameters['networkNumber'];
        }

        if (requestParameters['node'] != null) {
            queryParameters['node'] = requestParameters['node'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uispId'] != null) {
            queryParameters['uisp_id'] = requestParameters['uispId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/links/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLinkListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LinksLookupList(requestParameters: ApiV1LinksLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLinkList> {
        const response = await this.apiV1LinksLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LinksPartialUpdateRaw(requestParameters: ApiV1LinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LinksPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/links/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLinkToJSON(requestParameters['patchedLink']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LinksPartialUpdate(requestParameters: ApiV1LinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.apiV1LinksPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LinksRetrieveRaw(requestParameters: ApiV1LinksRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LinksRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/links/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LinksRetrieve(requestParameters: ApiV1LinksRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.apiV1LinksRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LinksUpdateRaw(requestParameters: ApiV1LinksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LinksUpdate().'
            );
        }

        if (requestParameters['link'] == null) {
            throw new runtime.RequiredError(
                'link',
                'Required parameter "link" was null or undefined when calling apiV1LinksUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/links/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LinkToJSON(requestParameters['link']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LinksUpdate(requestParameters: ApiV1LinksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.apiV1LinksUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
