/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Device,
  PaginatedDeviceList,
  PatchedDevice,
} from '../models/index';
import {
    DeviceFromJSON,
    DeviceToJSON,
    PaginatedDeviceListFromJSON,
    PaginatedDeviceListToJSON,
    PatchedDeviceFromJSON,
    PatchedDeviceToJSON,
} from '../models/index';

export interface ApiV1DevicesCreateRequest {
    device: Omit<Device, 'id'|'latitude'|'longitude'|'altitude'|'links_from'|'links_to'>;
}

export interface ApiV1DevicesDestroyRequest {
    id: string;
}

export interface ApiV1DevicesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1DevicesLookupListRequest {
    name?: string;
    networkNumber?: number;
    node?: string;
    page?: number;
    pageSize?: number;
    status?: string;
    uispId?: string;
}

export interface ApiV1DevicesPartialUpdateRequest {
    id: string;
    patchedDevice?: Omit<PatchedDevice, 'id'|'latitude'|'longitude'|'altitude'|'links_from'|'links_to'>;
}

export interface ApiV1DevicesRetrieveRequest {
    id: string;
}

export interface ApiV1DevicesUpdateRequest {
    id: string;
    device: Omit<Device, 'id'|'latitude'|'longitude'|'altitude'|'links_from'|'links_to'>;
}

/**
 * 
 */
export class DevicesApi extends runtime.BaseAPI {

    /**
     */
    async apiV1DevicesCreateRaw(requestParameters: ApiV1DevicesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters['device'] == null) {
            throw new runtime.RequiredError(
                'device',
                'Required parameter "device" was null or undefined when calling apiV1DevicesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/devices/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceToJSON(requestParameters['device']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     */
    async apiV1DevicesCreate(requestParameters: ApiV1DevicesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Device> {
        const response = await this.apiV1DevicesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1DevicesDestroyRaw(requestParameters: ApiV1DevicesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1DevicesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/devices/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1DevicesDestroy(requestParameters: ApiV1DevicesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1DevicesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1DevicesListRaw(requestParameters: ApiV1DevicesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDeviceList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/devices/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDeviceListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1DevicesList(requestParameters: ApiV1DevicesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDeviceList> {
        const response = await this.apiV1DevicesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1DevicesLookupListRaw(requestParameters: ApiV1DevicesLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDeviceList>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['networkNumber'] != null) {
            queryParameters['network_number'] = requestParameters['networkNumber'];
        }

        if (requestParameters['node'] != null) {
            queryParameters['node'] = requestParameters['node'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['uispId'] != null) {
            queryParameters['uisp_id'] = requestParameters['uispId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/devices/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDeviceListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1DevicesLookupList(requestParameters: ApiV1DevicesLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDeviceList> {
        const response = await this.apiV1DevicesLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1DevicesPartialUpdateRaw(requestParameters: ApiV1DevicesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1DevicesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/devices/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDeviceToJSON(requestParameters['patchedDevice']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     */
    async apiV1DevicesPartialUpdate(requestParameters: ApiV1DevicesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Device> {
        const response = await this.apiV1DevicesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1DevicesRetrieveRaw(requestParameters: ApiV1DevicesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1DevicesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/devices/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     */
    async apiV1DevicesRetrieve(requestParameters: ApiV1DevicesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Device> {
        const response = await this.apiV1DevicesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1DevicesUpdateRaw(requestParameters: ApiV1DevicesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Device>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1DevicesUpdate().'
            );
        }

        if (requestParameters['device'] == null) {
            throw new runtime.RequiredError(
                'device',
                'Required parameter "device" was null or undefined when calling apiV1DevicesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/devices/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceToJSON(requestParameters['device']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceFromJSON(jsonValue));
    }

    /**
     */
    async apiV1DevicesUpdate(requestParameters: ApiV1DevicesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Device> {
        const response = await this.apiV1DevicesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
