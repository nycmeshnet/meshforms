/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessPoint,
  PaginatedAccessPointList,
  PatchedAccessPoint,
} from '../models/index';
import {
    AccessPointFromJSON,
    AccessPointToJSON,
    PaginatedAccessPointListFromJSON,
    PaginatedAccessPointListToJSON,
    PatchedAccessPointFromJSON,
    PatchedAccessPointToJSON,
} from '../models/index';

export interface ApiV1AccesspointsCreateRequest {
    accessPoint: Omit<AccessPoint, 'id'|'links_from'|'links_to'>;
}

export interface ApiV1AccesspointsDestroyRequest {
    id: string;
}

export interface ApiV1AccesspointsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1AccesspointsLookupListRequest {
    name?: string;
    networkNumber?: number;
    node?: string;
    page?: number;
    pageSize?: number;
    status?: string;
    uispId?: string;
}

export interface ApiV1AccesspointsPartialUpdateRequest {
    id: string;
    patchedAccessPoint?: Omit<PatchedAccessPoint, 'id'|'links_from'|'links_to'>;
}

export interface ApiV1AccesspointsRetrieveRequest {
    id: string;
}

export interface ApiV1AccesspointsUpdateRequest {
    id: string;
    accessPoint: Omit<AccessPoint, 'id'|'links_from'|'links_to'>;
}

/**
 * 
 */
export class AccessPointsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1AccesspointsCreateRaw(requestParameters: ApiV1AccesspointsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessPoint>> {
        if (requestParameters['accessPoint'] == null) {
            throw new runtime.RequiredError(
                'accessPoint',
                'Required parameter "accessPoint" was null or undefined when calling apiV1AccesspointsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/accesspoints/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccessPointToJSON(requestParameters['accessPoint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessPointFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AccesspointsCreate(requestParameters: ApiV1AccesspointsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessPoint> {
        const response = await this.apiV1AccesspointsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AccesspointsDestroyRaw(requestParameters: ApiV1AccesspointsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1AccesspointsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/accesspoints/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1AccesspointsDestroy(requestParameters: ApiV1AccesspointsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1AccesspointsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1AccesspointsListRaw(requestParameters: ApiV1AccesspointsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAccessPointList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/accesspoints/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAccessPointListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AccesspointsList(requestParameters: ApiV1AccesspointsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAccessPointList> {
        const response = await this.apiV1AccesspointsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AccesspointsLookupListRaw(requestParameters: ApiV1AccesspointsLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAccessPointList>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['networkNumber'] != null) {
            queryParameters['network_number'] = requestParameters['networkNumber'];
        }

        if (requestParameters['node'] != null) {
            queryParameters['node'] = requestParameters['node'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['uispId'] != null) {
            queryParameters['uisp_id'] = requestParameters['uispId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/accesspoints/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAccessPointListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AccesspointsLookupList(requestParameters: ApiV1AccesspointsLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAccessPointList> {
        const response = await this.apiV1AccesspointsLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AccesspointsPartialUpdateRaw(requestParameters: ApiV1AccesspointsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessPoint>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1AccesspointsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/accesspoints/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAccessPointToJSON(requestParameters['patchedAccessPoint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessPointFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AccesspointsPartialUpdate(requestParameters: ApiV1AccesspointsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessPoint> {
        const response = await this.apiV1AccesspointsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AccesspointsRetrieveRaw(requestParameters: ApiV1AccesspointsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessPoint>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1AccesspointsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/accesspoints/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessPointFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AccesspointsRetrieve(requestParameters: ApiV1AccesspointsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessPoint> {
        const response = await this.apiV1AccesspointsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AccesspointsUpdateRaw(requestParameters: ApiV1AccesspointsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessPoint>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1AccesspointsUpdate().'
            );
        }

        if (requestParameters['accessPoint'] == null) {
            throw new runtime.RequiredError(
                'accessPoint',
                'Required parameter "accessPoint" was null or undefined when calling apiV1AccesspointsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/accesspoints/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccessPointToJSON(requestParameters['accessPoint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessPointFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AccesspointsUpdate(requestParameters: ApiV1AccesspointsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessPoint> {
        const response = await this.apiV1AccesspointsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
