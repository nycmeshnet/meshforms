/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Member,
  PaginatedMemberList,
  PatchedMember,
} from '../models/index';
import {
    MemberFromJSON,
    MemberToJSON,
    PaginatedMemberListFromJSON,
    PaginatedMemberListToJSON,
    PatchedMemberFromJSON,
    PatchedMemberToJSON,
} from '../models/index';

export interface ApiV1MembersCreateRequest {
    member: Omit<Member, 'id'|'all_email_addresses'|'all_phone_numbers'|'installs'>;
}

export interface ApiV1MembersDestroyRequest {
    id: string;
}

export interface ApiV1MembersListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1MembersLookupListRequest {
    emailAddress?: string;
    name?: string;
    page?: number;
    pageSize?: number;
    phoneNumber?: string;
}

export interface ApiV1MembersPartialUpdateRequest {
    id: string;
    patchedMember?: Omit<PatchedMember, 'id'|'all_email_addresses'|'all_phone_numbers'|'installs'>;
}

export interface ApiV1MembersRetrieveRequest {
    id: string;
}

export interface ApiV1MembersUpdateRequest {
    id: string;
    member: Omit<Member, 'id'|'all_email_addresses'|'all_phone_numbers'|'installs'>;
}

/**
 * 
 */
export class MembersApi extends runtime.BaseAPI {

    /**
     */
    async apiV1MembersCreateRaw(requestParameters: ApiV1MembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters['member'] == null) {
            throw new runtime.RequiredError(
                'member',
                'Required parameter "member" was null or undefined when calling apiV1MembersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/members/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MemberToJSON(requestParameters['member']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     */
    async apiV1MembersCreate(requestParameters: ApiV1MembersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Member> {
        const response = await this.apiV1MembersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1MembersDestroyRaw(requestParameters: ApiV1MembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1MembersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/members/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1MembersDestroy(requestParameters: ApiV1MembersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1MembersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1MembersListRaw(requestParameters: ApiV1MembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedMemberList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/members/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMemberListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1MembersList(requestParameters: ApiV1MembersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedMemberList> {
        const response = await this.apiV1MembersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1MembersLookupListRaw(requestParameters: ApiV1MembersLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedMemberList>> {
        const queryParameters: any = {};

        if (requestParameters['emailAddress'] != null) {
            queryParameters['email_address'] = requestParameters['emailAddress'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['phoneNumber'] != null) {
            queryParameters['phone_number'] = requestParameters['phoneNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/members/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMemberListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1MembersLookupList(requestParameters: ApiV1MembersLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedMemberList> {
        const response = await this.apiV1MembersLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1MembersPartialUpdateRaw(requestParameters: ApiV1MembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1MembersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/members/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedMemberToJSON(requestParameters['patchedMember']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     */
    async apiV1MembersPartialUpdate(requestParameters: ApiV1MembersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Member> {
        const response = await this.apiV1MembersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1MembersRetrieveRaw(requestParameters: ApiV1MembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1MembersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/members/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     */
    async apiV1MembersRetrieve(requestParameters: ApiV1MembersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Member> {
        const response = await this.apiV1MembersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1MembersUpdateRaw(requestParameters: ApiV1MembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1MembersUpdate().'
            );
        }

        if (requestParameters['member'] == null) {
            throw new runtime.RequiredError(
                'member',
                'Required parameter "member" was null or undefined when calling apiV1MembersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/members/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MemberToJSON(requestParameters['member']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     */
    async apiV1MembersUpdate(requestParameters: ApiV1MembersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Member> {
        const response = await this.apiV1MembersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
