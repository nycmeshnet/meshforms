/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedSectorList,
  PatchedSector,
  Sector,
} from '../models/index';
import {
    PaginatedSectorListFromJSON,
    PaginatedSectorListToJSON,
    PatchedSectorFromJSON,
    PatchedSectorToJSON,
    SectorFromJSON,
    SectorToJSON,
} from '../models/index';

export interface ApiV1SectorsCreateRequest {
    sector: Omit<Sector, 'id'|'latitude'|'longitude'|'altitude'|'links_from'|'links_to'>;
}

export interface ApiV1SectorsDestroyRequest {
    id: string;
}

export interface ApiV1SectorsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1SectorsLookupListRequest {
    name?: string;
    networkNumber?: number;
    node?: string;
    page?: number;
    pageSize?: number;
    status?: string;
    uispId?: string;
}

export interface ApiV1SectorsPartialUpdateRequest {
    id: string;
    patchedSector?: Omit<PatchedSector, 'id'|'latitude'|'longitude'|'altitude'|'links_from'|'links_to'>;
}

export interface ApiV1SectorsRetrieveRequest {
    id: string;
}

export interface ApiV1SectorsUpdateRequest {
    id: string;
    sector: Omit<Sector, 'id'|'latitude'|'longitude'|'altitude'|'links_from'|'links_to'>;
}

/**
 * 
 */
export class SectorsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1SectorsCreateRaw(requestParameters: ApiV1SectorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sector>> {
        if (requestParameters['sector'] == null) {
            throw new runtime.RequiredError(
                'sector',
                'Required parameter "sector" was null or undefined when calling apiV1SectorsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sectors/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SectorToJSON(requestParameters['sector']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectorFromJSON(jsonValue));
    }

    /**
     */
    async apiV1SectorsCreate(requestParameters: ApiV1SectorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sector> {
        const response = await this.apiV1SectorsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1SectorsDestroyRaw(requestParameters: ApiV1SectorsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1SectorsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sectors/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1SectorsDestroy(requestParameters: ApiV1SectorsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1SectorsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1SectorsListRaw(requestParameters: ApiV1SectorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSectorList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sectors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSectorListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1SectorsList(requestParameters: ApiV1SectorsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSectorList> {
        const response = await this.apiV1SectorsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1SectorsLookupListRaw(requestParameters: ApiV1SectorsLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSectorList>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['networkNumber'] != null) {
            queryParameters['network_number'] = requestParameters['networkNumber'];
        }

        if (requestParameters['node'] != null) {
            queryParameters['node'] = requestParameters['node'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['uispId'] != null) {
            queryParameters['uisp_id'] = requestParameters['uispId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sectors/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSectorListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1SectorsLookupList(requestParameters: ApiV1SectorsLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSectorList> {
        const response = await this.apiV1SectorsLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1SectorsPartialUpdateRaw(requestParameters: ApiV1SectorsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sector>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1SectorsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sectors/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSectorToJSON(requestParameters['patchedSector']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectorFromJSON(jsonValue));
    }

    /**
     */
    async apiV1SectorsPartialUpdate(requestParameters: ApiV1SectorsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sector> {
        const response = await this.apiV1SectorsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1SectorsRetrieveRaw(requestParameters: ApiV1SectorsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sector>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1SectorsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sectors/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectorFromJSON(jsonValue));
    }

    /**
     */
    async apiV1SectorsRetrieve(requestParameters: ApiV1SectorsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sector> {
        const response = await this.apiV1SectorsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1SectorsUpdateRaw(requestParameters: ApiV1SectorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sector>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1SectorsUpdate().'
            );
        }

        if (requestParameters['sector'] == null) {
            throw new runtime.RequiredError(
                'sector',
                'Required parameter "sector" was null or undefined when calling apiV1SectorsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sectors/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SectorToJSON(requestParameters['sector']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SectorFromJSON(jsonValue));
    }

    /**
     */
    async apiV1SectorsUpdate(requestParameters: ApiV1SectorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sector> {
        const response = await this.apiV1SectorsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
