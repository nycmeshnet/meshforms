/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Install,
  PaginatedInstallList,
  PatchedInstall,
} from '../models/index';
import {
    InstallFromJSON,
    InstallToJSON,
    PaginatedInstallListFromJSON,
    PaginatedInstallListToJSON,
    PatchedInstallFromJSON,
    PatchedInstallToJSON,
} from '../models/index';

export interface ApiV1InstallsCreateRequest {
    install: Omit<Install, 'id'|'install_number'>;
}

export interface ApiV1InstallsDestroyRequest {
    id: string;
}

export interface ApiV1InstallsDestroy2Request {
    installNumber: number;
}

export interface ApiV1InstallsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1InstallsLookupListRequest {
    building?: number;
    member?: number;
    networkNumber?: number;
    node?: string;
    page?: number;
    pageSize?: number;
    status?: string;
}

export interface ApiV1InstallsPartialUpdateRequest {
    id: string;
    patchedInstall?: Omit<PatchedInstall, 'id'|'install_number'>;
}

export interface ApiV1InstallsPartialUpdate2Request {
    installNumber: number;
    patchedInstall?: Omit<PatchedInstall, 'id'|'install_number'>;
}

export interface ApiV1InstallsRetrieveRequest {
    id: string;
}

export interface ApiV1InstallsRetrieve2Request {
    installNumber: number;
}

export interface ApiV1InstallsUpdateRequest {
    id: string;
    install: Omit<Install, 'id'|'install_number'>;
}

export interface ApiV1InstallsUpdate2Request {
    installNumber: number;
    install: Omit<Install, 'id'|'install_number'>;
}

/**
 * 
 */
export class InstallsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1InstallsCreateRaw(requestParameters: ApiV1InstallsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Install>> {
        if (requestParameters['install'] == null) {
            throw new runtime.RequiredError(
                'install',
                'Required parameter "install" was null or undefined when calling apiV1InstallsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstallToJSON(requestParameters['install']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsCreate(requestParameters: ApiV1InstallsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Install> {
        const response = await this.apiV1InstallsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1InstallsDestroyRaw(requestParameters: ApiV1InstallsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1InstallsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1InstallsDestroy(requestParameters: ApiV1InstallsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1InstallsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1InstallsDestroy2Raw(requestParameters: ApiV1InstallsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['installNumber'] == null) {
            throw new runtime.RequiredError(
                'installNumber',
                'Required parameter "installNumber" was null or undefined when calling apiV1InstallsDestroy2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/{install_number}/`.replace(`{${"install_number"}}`, encodeURIComponent(String(requestParameters['installNumber']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1InstallsDestroy2(requestParameters: ApiV1InstallsDestroy2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1InstallsDestroy2Raw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1InstallsListRaw(requestParameters: ApiV1InstallsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedInstallList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedInstallListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsList(requestParameters: ApiV1InstallsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedInstallList> {
        const response = await this.apiV1InstallsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1InstallsLookupListRaw(requestParameters: ApiV1InstallsLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedInstallList>> {
        const queryParameters: any = {};

        if (requestParameters['building'] != null) {
            queryParameters['building'] = requestParameters['building'];
        }

        if (requestParameters['member'] != null) {
            queryParameters['member'] = requestParameters['member'];
        }

        if (requestParameters['networkNumber'] != null) {
            queryParameters['network_number'] = requestParameters['networkNumber'];
        }

        if (requestParameters['node'] != null) {
            queryParameters['node'] = requestParameters['node'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedInstallListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsLookupList(requestParameters: ApiV1InstallsLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedInstallList> {
        const response = await this.apiV1InstallsLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1InstallsPartialUpdateRaw(requestParameters: ApiV1InstallsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Install>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1InstallsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedInstallToJSON(requestParameters['patchedInstall']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsPartialUpdate(requestParameters: ApiV1InstallsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Install> {
        const response = await this.apiV1InstallsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1InstallsPartialUpdate2Raw(requestParameters: ApiV1InstallsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Install>> {
        if (requestParameters['installNumber'] == null) {
            throw new runtime.RequiredError(
                'installNumber',
                'Required parameter "installNumber" was null or undefined when calling apiV1InstallsPartialUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/{install_number}/`.replace(`{${"install_number"}}`, encodeURIComponent(String(requestParameters['installNumber']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedInstallToJSON(requestParameters['patchedInstall']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsPartialUpdate2(requestParameters: ApiV1InstallsPartialUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Install> {
        const response = await this.apiV1InstallsPartialUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1InstallsRetrieveRaw(requestParameters: ApiV1InstallsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Install>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1InstallsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsRetrieve(requestParameters: ApiV1InstallsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Install> {
        const response = await this.apiV1InstallsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1InstallsRetrieve2Raw(requestParameters: ApiV1InstallsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Install>> {
        if (requestParameters['installNumber'] == null) {
            throw new runtime.RequiredError(
                'installNumber',
                'Required parameter "installNumber" was null or undefined when calling apiV1InstallsRetrieve2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/{install_number}/`.replace(`{${"install_number"}}`, encodeURIComponent(String(requestParameters['installNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsRetrieve2(requestParameters: ApiV1InstallsRetrieve2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Install> {
        const response = await this.apiV1InstallsRetrieve2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1InstallsUpdateRaw(requestParameters: ApiV1InstallsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Install>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1InstallsUpdate().'
            );
        }

        if (requestParameters['install'] == null) {
            throw new runtime.RequiredError(
                'install',
                'Required parameter "install" was null or undefined when calling apiV1InstallsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InstallToJSON(requestParameters['install']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsUpdate(requestParameters: ApiV1InstallsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Install> {
        const response = await this.apiV1InstallsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1InstallsUpdate2Raw(requestParameters: ApiV1InstallsUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Install>> {
        if (requestParameters['installNumber'] == null) {
            throw new runtime.RequiredError(
                'installNumber',
                'Required parameter "installNumber" was null or undefined when calling apiV1InstallsUpdate2().'
            );
        }

        if (requestParameters['install'] == null) {
            throw new runtime.RequiredError(
                'install',
                'Required parameter "install" was null or undefined when calling apiV1InstallsUpdate2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/installs/{install_number}/`.replace(`{${"install_number"}}`, encodeURIComponent(String(requestParameters['installNumber']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InstallToJSON(requestParameters['install']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InstallsUpdate2(requestParameters: ApiV1InstallsUpdate2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Install> {
        const response = await this.apiV1InstallsUpdate2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
