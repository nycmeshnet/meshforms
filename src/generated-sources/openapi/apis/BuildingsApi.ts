/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Building,
  PaginatedBuildingList,
  PatchedBuilding,
} from '../models/index';
import {
    BuildingFromJSON,
    BuildingToJSON,
    PaginatedBuildingListFromJSON,
    PaginatedBuildingListToJSON,
    PatchedBuildingFromJSON,
    PatchedBuildingToJSON,
} from '../models/index';

export interface ApiV1BuildingsCreateRequest {
    building: Omit<Building, 'id'|'installs'>;
}

export interface ApiV1BuildingsDestroyRequest {
    id: string;
}

export interface ApiV1BuildingsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1BuildingsLookupListRequest {
    bin?: number;
    city?: string;
    installNumber?: number;
    networkNumber?: number;
    node?: string;
    page?: number;
    pageSize?: number;
    primaryNetworkNumber?: number;
    primaryNode?: string;
    state?: string;
    streetAddress?: string;
    zipCode?: string;
}

export interface ApiV1BuildingsPartialUpdateRequest {
    id: string;
    patchedBuilding?: Omit<PatchedBuilding, 'id'|'installs'>;
}

export interface ApiV1BuildingsRetrieveRequest {
    id: string;
}

export interface ApiV1BuildingsUpdateRequest {
    id: string;
    building: Omit<Building, 'id'|'installs'>;
}

/**
 * 
 */
export class BuildingsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1BuildingsCreateRaw(requestParameters: ApiV1BuildingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Building>> {
        if (requestParameters['building'] == null) {
            throw new runtime.RequiredError(
                'building',
                'Required parameter "building" was null or undefined when calling apiV1BuildingsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/buildings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuildingToJSON(requestParameters['building']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildingFromJSON(jsonValue));
    }

    /**
     */
    async apiV1BuildingsCreate(requestParameters: ApiV1BuildingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Building> {
        const response = await this.apiV1BuildingsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1BuildingsDestroyRaw(requestParameters: ApiV1BuildingsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BuildingsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/buildings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1BuildingsDestroy(requestParameters: ApiV1BuildingsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1BuildingsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1BuildingsListRaw(requestParameters: ApiV1BuildingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBuildingList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/buildings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBuildingListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1BuildingsList(requestParameters: ApiV1BuildingsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBuildingList> {
        const response = await this.apiV1BuildingsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1BuildingsLookupListRaw(requestParameters: ApiV1BuildingsLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBuildingList>> {
        const queryParameters: any = {};

        if (requestParameters['bin'] != null) {
            queryParameters['bin'] = requestParameters['bin'];
        }

        if (requestParameters['city'] != null) {
            queryParameters['city'] = requestParameters['city'];
        }

        if (requestParameters['installNumber'] != null) {
            queryParameters['install_number'] = requestParameters['installNumber'];
        }

        if (requestParameters['networkNumber'] != null) {
            queryParameters['network_number'] = requestParameters['networkNumber'];
        }

        if (requestParameters['node'] != null) {
            queryParameters['node'] = requestParameters['node'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['primaryNetworkNumber'] != null) {
            queryParameters['primary_network_number'] = requestParameters['primaryNetworkNumber'];
        }

        if (requestParameters['primaryNode'] != null) {
            queryParameters['primary_node'] = requestParameters['primaryNode'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['streetAddress'] != null) {
            queryParameters['street_address'] = requestParameters['streetAddress'];
        }

        if (requestParameters['zipCode'] != null) {
            queryParameters['zip_code'] = requestParameters['zipCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/buildings/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBuildingListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1BuildingsLookupList(requestParameters: ApiV1BuildingsLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBuildingList> {
        const response = await this.apiV1BuildingsLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1BuildingsPartialUpdateRaw(requestParameters: ApiV1BuildingsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Building>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BuildingsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/buildings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedBuildingToJSON(requestParameters['patchedBuilding']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildingFromJSON(jsonValue));
    }

    /**
     */
    async apiV1BuildingsPartialUpdate(requestParameters: ApiV1BuildingsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Building> {
        const response = await this.apiV1BuildingsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1BuildingsRetrieveRaw(requestParameters: ApiV1BuildingsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Building>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BuildingsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/buildings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildingFromJSON(jsonValue));
    }

    /**
     */
    async apiV1BuildingsRetrieve(requestParameters: ApiV1BuildingsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Building> {
        const response = await this.apiV1BuildingsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1BuildingsUpdateRaw(requestParameters: ApiV1BuildingsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Building>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BuildingsUpdate().'
            );
        }

        if (requestParameters['building'] == null) {
            throw new runtime.RequiredError(
                'building',
                'Required parameter "building" was null or undefined when calling apiV1BuildingsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/buildings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BuildingToJSON(requestParameters['building']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildingFromJSON(jsonValue));
    }

    /**
     */
    async apiV1BuildingsUpdate(requestParameters: ApiV1BuildingsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Building> {
        const response = await this.apiV1BuildingsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
