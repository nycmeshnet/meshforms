/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedQueryFormList,
} from '../models/index';
import {
    PaginatedQueryFormListFromJSON,
    PaginatedQueryFormListToJSON,
} from '../models/index';

export interface ApiV1QueryBuildingsListRequest {
    password: string;
    bin?: string;
    city?: string;
    page?: number;
    pageSize?: number;
    state?: string;
    streetAddress?: string;
    zipCode?: string;
}

export interface ApiV1QueryInstallsListRequest {
    password: string;
    building?: string;
    installNumber?: number;
    member?: string;
    networkNumber?: number;
    page?: number;
    pageSize?: number;
    status?: ApiV1QueryInstallsListStatusEnum;
}

export interface ApiV1QueryMembersListRequest {
    password: string;
    emailAddress?: string;
    name?: string;
    page?: number;
    pageSize?: number;
    phoneNumber?: string;
}

/**
 * 
 */
export class LegacyQueryFormApi extends runtime.BaseAPI {

    /**
     * Query & filter based on Building attributes. Results are returned as flattened spreadsheet row style output
     */
    async apiV1QueryBuildingsListRaw(requestParameters: ApiV1QueryBuildingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQueryFormList>> {
        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling apiV1QueryBuildingsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bin'] != null) {
            queryParameters['bin'] = requestParameters['bin'];
        }

        if (requestParameters['city'] != null) {
            queryParameters['city'] = requestParameters['city'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['password'] != null) {
            queryParameters['password'] = requestParameters['password'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['streetAddress'] != null) {
            queryParameters['street_address'] = requestParameters['streetAddress'];
        }

        if (requestParameters['zipCode'] != null) {
            queryParameters['zip_code'] = requestParameters['zipCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/query/buildings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQueryFormListFromJSON(jsonValue));
    }

    /**
     * Query & filter based on Building attributes. Results are returned as flattened spreadsheet row style output
     */
    async apiV1QueryBuildingsList(requestParameters: ApiV1QueryBuildingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQueryFormList> {
        const response = await this.apiV1QueryBuildingsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query & filter based on Install attributes. Results are returned as flattened spreadsheet row style output
     */
    async apiV1QueryInstallsListRaw(requestParameters: ApiV1QueryInstallsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQueryFormList>> {
        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling apiV1QueryInstallsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['building'] != null) {
            queryParameters['building'] = requestParameters['building'];
        }

        if (requestParameters['installNumber'] != null) {
            queryParameters['install_number'] = requestParameters['installNumber'];
        }

        if (requestParameters['member'] != null) {
            queryParameters['member'] = requestParameters['member'];
        }

        if (requestParameters['networkNumber'] != null) {
            queryParameters['network_number'] = requestParameters['networkNumber'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['password'] != null) {
            queryParameters['password'] = requestParameters['password'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/query/installs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        console.log(response);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQueryFormListFromJSON(jsonValue));
    }

    /**
     * Query & filter based on Install attributes. Results are returned as flattened spreadsheet row style output
     */
    async apiV1QueryInstallsList(requestParameters: ApiV1QueryInstallsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQueryFormList> {
        const response = await this.apiV1QueryInstallsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query & filter based on Member attributes. Results are returned as flattened spreadsheet row style output
     */
    async apiV1QueryMembersListRaw(requestParameters: ApiV1QueryMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQueryFormList>> {
        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling apiV1QueryMembersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['emailAddress'] != null) {
            queryParameters['email_address'] = requestParameters['emailAddress'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['password'] != null) {
            queryParameters['password'] = requestParameters['password'];
        }

        if (requestParameters['phoneNumber'] != null) {
            queryParameters['phone_number'] = requestParameters['phoneNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/query/members/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQueryFormListFromJSON(jsonValue));
    }

    /**
     * Query & filter based on Member attributes. Results are returned as flattened spreadsheet row style output
     */
    async apiV1QueryMembersList(requestParameters: ApiV1QueryMembersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQueryFormList> {
        const response = await this.apiV1QueryMembersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV1QueryInstallsListStatusEnum = {
    Active: 'Active',
    Blocked: 'Blocked',
    Closed: 'Closed',
    Inactive: 'Inactive',
    NnReassigned: 'NN Reassigned',
    Pending: 'Pending',
    RequestReceived: 'Request Received'
} as const;
export type ApiV1QueryInstallsListStatusEnum = typeof ApiV1QueryInstallsListStatusEnum[keyof typeof ApiV1QueryInstallsListStatusEnum];
