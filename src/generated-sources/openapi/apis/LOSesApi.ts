/* tslint:disable */
/* eslint-disable */
/**
 * MeshDB Data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LOS,
  PaginatedLOSList,
  PatchedLOS,
} from '../models/index';
import {
    LOSFromJSON,
    LOSToJSON,
    PaginatedLOSListFromJSON,
    PaginatedLOSListToJSON,
    PatchedLOSFromJSON,
    PatchedLOSToJSON,
} from '../models/index';

export interface ApiV1LosesCreateRequest {
    lOS: Omit<LOS, 'id'>;
}

export interface ApiV1LosesDestroyRequest {
    id: string;
}

export interface ApiV1LosesListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiV1LosesLookupListRequest {
    analysisDate?: Date;
    building?: number;
    installNumber?: number;
    networkNumber?: number;
    node?: number;
    page?: number;
    pageSize?: number;
    source?: string;
}

export interface ApiV1LosesPartialUpdateRequest {
    id: string;
    patchedLOS?: Omit<PatchedLOS, 'id'>;
}

export interface ApiV1LosesRetrieveRequest {
    id: string;
}

export interface ApiV1LosesUpdateRequest {
    id: string;
    lOS: Omit<LOS, 'id'>;
}

/**
 * 
 */
export class LOSesApi extends runtime.BaseAPI {

    /**
     */
    async apiV1LosesCreateRaw(requestParameters: ApiV1LosesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LOS>> {
        if (requestParameters['lOS'] == null) {
            throw new runtime.RequiredError(
                'lOS',
                'Required parameter "lOS" was null or undefined when calling apiV1LosesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/loses/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LOSToJSON(requestParameters['lOS']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LOSFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LosesCreate(requestParameters: ApiV1LosesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LOS> {
        const response = await this.apiV1LosesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LosesDestroyRaw(requestParameters: ApiV1LosesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LosesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/loses/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1LosesDestroy(requestParameters: ApiV1LosesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1LosesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1LosesListRaw(requestParameters: ApiV1LosesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLOSList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/loses/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLOSListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LosesList(requestParameters: ApiV1LosesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLOSList> {
        const response = await this.apiV1LosesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LosesLookupListRaw(requestParameters: ApiV1LosesLookupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLOSList>> {
        const queryParameters: any = {};

        if (requestParameters['analysisDate'] != null) {
            queryParameters['analysis_date'] = (requestParameters['analysisDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['building'] != null) {
            queryParameters['building'] = requestParameters['building'];
        }

        if (requestParameters['installNumber'] != null) {
            queryParameters['install_number'] = requestParameters['installNumber'];
        }

        if (requestParameters['networkNumber'] != null) {
            queryParameters['network_number'] = requestParameters['networkNumber'];
        }

        if (requestParameters['node'] != null) {
            queryParameters['node'] = requestParameters['node'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['source'] != null) {
            queryParameters['source'] = requestParameters['source'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/loses/lookup/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLOSListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LosesLookupList(requestParameters: ApiV1LosesLookupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLOSList> {
        const response = await this.apiV1LosesLookupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LosesPartialUpdateRaw(requestParameters: ApiV1LosesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LOS>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LosesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/loses/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLOSToJSON(requestParameters['patchedLOS']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LOSFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LosesPartialUpdate(requestParameters: ApiV1LosesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LOS> {
        const response = await this.apiV1LosesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LosesRetrieveRaw(requestParameters: ApiV1LosesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LOS>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LosesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/loses/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LOSFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LosesRetrieve(requestParameters: ApiV1LosesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LOS> {
        const response = await this.apiV1LosesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1LosesUpdateRaw(requestParameters: ApiV1LosesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LOS>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1LosesUpdate().'
            );
        }

        if (requestParameters['lOS'] == null) {
            throw new runtime.RequiredError(
                'lOS',
                'Required parameter "lOS" was null or undefined when calling apiV1LosesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/loses/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LOSToJSON(requestParameters['lOS']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LOSFromJSON(jsonValue));
    }

    /**
     */
    async apiV1LosesUpdate(requestParameters: ApiV1LosesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LOS> {
        const response = await this.apiV1LosesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
